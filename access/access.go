// Code generated by goctl. DO NOT EDIT.
// Source: access.proto

package access

import (
	"context"

	"accessToken_grpc/pb/token"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GenReq    = token.GenReq
	Result    = token.Result
	TokenReq  = token.TokenReq
	TokenResp = token.TokenResp

	Access interface {
		GenToken(ctx context.Context, in *GenReq, opts ...grpc.CallOption) (*TokenResp, error)
		FreezeToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*TokenResp, error)
		ResetToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*TokenResp, error)
		VerifyToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*TokenResp, error)
	}

	defaultAccess struct {
		cli zrpc.Client
	}
)

func NewAccess(cli zrpc.Client) Access {
	return &defaultAccess{
		cli: cli,
	}
}

func (m *defaultAccess) GenToken(ctx context.Context, in *GenReq, opts ...grpc.CallOption) (*TokenResp, error) {
	client := token.NewAccessClient(m.cli.Conn())
	return client.GenToken(ctx, in, opts...)
}

func (m *defaultAccess) FreezeToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*TokenResp, error) {
	client := token.NewAccessClient(m.cli.Conn())
	return client.FreezeToken(ctx, in, opts...)
}

func (m *defaultAccess) ResetToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*TokenResp, error) {
	client := token.NewAccessClient(m.cli.Conn())
	return client.ResetToken(ctx, in, opts...)
}

func (m *defaultAccess) VerifyToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*TokenResp, error) {
	client := token.NewAccessClient(m.cli.Conn())
	return client.VerifyToken(ctx, in, opts...)
}
